# Simple runtime Dockerfile with pre-built JAR
FROM eclipse-temurin:23-jre-alpine

LABEL maintainer="AsciiFrame Team"
LABEL org.opencontainers.image.title="AsciiFrame"
LABEL org.opencontainers.image.description="Zero-config AsciiDoc renderer with beautiful themes"

# Create non-root user
RUN addgroup -g 1001 -S asciiframe && \
    adduser -u 1001 -S asciiframe -G asciiframe

WORKDIR /work

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    fontconfig \
    ttf-dejavu \
    ttf-liberation \
    haveged \
    && rm -rf /var/cache/apk/*

# Copy pre-built JAR and files to /work
COPY build/libs/app-fat.jar /work/app.jar
COPY themes/ /work/themes/
COPY config.yml /work/config.yml.template

# Create necessary directories  
RUN mkdir -p /work/docs /work/build /work/.cache && \
    chown -R asciiframe:asciiframe /work

# Health check with longer start period for AsciidoctorJ initialization
HEALTHCHECK --interval=60s --timeout=15s --start-period=60s --retries=2 \
    CMD curl -f http://localhost:8080/health || exit 1

# Switch to non-root user
USER asciiframe

# Environment variables
ENV JAVA_OPTS="-Xms256m -Xmx512m -XX:+UseZGC -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Djava.security.egd=file:/dev/urandom"
ENV CONFIG_PATH="/work/config.yml"
ENV WORK_DIR="/work"

EXPOSE 8080

# Volume mount points
VOLUME ["/work/docs", "/work/build", "/work/.cache"]

# Start script
ENTRYPOINT ["sh", "-c", "\
haveged -F & \
echo 'Starting AsciiFrame...' && \
if [ ! -f $CONFIG_PATH ]; then \
  echo 'Using default configuration' && \
  export CONFIG_PATH=/work/config.yml.template; \
fi && \
echo 'Config: '$CONFIG_PATH && \
echo 'Working directory: '$WORK_DIR && \
exec java $JAVA_OPTS -jar /work/app.jar\
"]