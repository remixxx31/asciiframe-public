name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-jar:
    name: Build JAR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup JDK 24 (Temurin)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '23'
        cache: 'gradle'
        
    - name: Verify java
      run: java -version
      
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Build JAR
      run: ./gradlew clean shadowJar --no-daemon
      
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: asciiframe-jar
        path: build/libs/app-fat.jar
        retention-days: 1

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-jar
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: asciiframe-jar
        path: build/libs/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          asciiframe/renderer
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-jar, build-docker]
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: asciiframe-jar
        path: ./
        
    - name: Rename JAR for release
      run: mv app-fat.jar asciiframe.jar
      
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog since last tag
        LAST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]' | head -1)
        if [ -z "$LAST_TAG" ]; then
          CHANGES=$(git log --pretty=format:"- %s" --no-merges)
        else
          CHANGES=$(git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges)
        fi
        
        cat << EOF > CHANGELOG.md
        ## What's Changed
        
        $CHANGES
        
        ## Docker Images
        
        - \`docker pull asciiframe/renderer:${GITHUB_REF#refs/tags/}\`
        - \`docker pull asciiframe/renderer:latest\`
        
        ## Quick Start
        
        \`\`\`bash
        # One-liner install (Recommended)
        curl -sSL https://get.asciiframe.io | bash
        
        # Or direct JAR download
        curl -LO https://github.com/asciiframe/asciiframe/releases/download/${GITHUB_REF#refs/tags/}/asciiframe.jar
        java -jar asciiframe.jar
        
        # Or via Docker
        docker run -p 8080:8080 -v ./docs:/work/docs asciiframe/renderer:${GITHUB_REF#refs/tags/}
        \`\`\`
        
        ## Installation
        
        See [Quick Start Guide](https://github.com/asciiframe/asciiframe/blob/main/QUICKSTART.md) for detailed installation instructions.
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          asciiframe.jar
          install.sh
        body_path: CHANGELOG.md
        generate_release_notes: false
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-docker-readme:
    name: Update Docker Hub README
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Update Docker Hub Description
      uses: peter-evans/dockerhub-description@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: asciiframe/renderer
        readme-filepath: ./README-OSS.md

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, update-docker-readme]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.create-release.result == 'success'
      run: |
        echo "üéâ Release ${{ github.ref }} published successfully!"
        echo "üì¶ JAR: https://github.com/asciiframe/asciiframe/releases/download/${{ github.ref_name }}/asciiframe.jar"
        echo "üê≥ Docker: docker pull asciiframe/renderer:${{ github.ref_name }}"
        
    - name: Notify failure
      if: needs.create-release.result == 'failure'
      run: |
        echo "‚ùå Release ${{ github.ref }} failed!"
        exit 1