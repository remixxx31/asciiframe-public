name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [24]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup JDK 24 (Temurin)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '23'
        cache: 'gradle'
        
    - name: Verify java
      run: java -version
      
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Run tests
      run: ./gradlew test --no-daemon
      
    - name: Build JAR
      run: ./gradlew shadowJar --no-daemon
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: build/libs/app-fat.jar
        retention-days: 7

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: test
    
    services:
      kroki:
        image: yuzutech/kroki
        ports:
          - 8000:8000
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: jar-artifact
        path: build/libs/
        
    - name: Set up JDK 24 (Temurin)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '23'
        cache: 'gradle'
        
    - name: Verify java
      run: java -version
        
    - name: Start AsciiFrame
      run: |
        java -jar build/libs/app-fat.jar &
        ASCIIFRAME_PID=$!
        echo "ASCIIFRAME_PID=$ASCIIFRAME_PID" >> $GITHUB_ENV
        
    - name: Wait for service
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        
    - name: Run smoke tests
      run: ./scripts/smoke_test.sh
      
    - name: Test API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:8080/health
        
        # Test render endpoint
        curl -X POST http://localhost:8080/render \
          -H "Content-Type: application/json" \
          -d '{"entry":"docs/live-demo.adoc","formats":["html"]}' \
          | grep -q '"success":true'
          
        # Test preview endpoint
        curl -f http://localhost:8080/preview/index.html | grep -q "<html>"
        
    - name: Stop AsciiFrame
      if: always()
      run: kill $ASCIIFRAME_PID || true

  docker-test:
    name: Docker Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: jar-artifact
        path: build/libs/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.production
        tags: asciiframe:test
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        # Start container
        docker run -d --name asciiframe-test \
          -p 8080:8080 \
          -v $PWD/docs:/work/docs \
          asciiframe:test
          
        # Wait for service
        timeout 30 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        
        # Test basic functionality
        curl -X POST http://localhost:8080/render \
          -H "Content-Type: application/json" \
          -d '{"entry":"docs/live-demo.adoc","formats":["html"]}' \
          | grep -q '"success":true'
          
        # Cleanup
        docker stop asciiframe-test
        docker rm asciiframe-test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: jar-artifact
        path: build/libs/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.production
        tags: asciiframe:scan
        load: true
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'asciiframe:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup JDK 24 (Temurin)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '23'
        cache: 'gradle'
        
    - name: Verify java
      run: java -version
      
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Run SpotBugs
      run: ./gradlew spotbugsMain --no-daemon || true
      
    - name: Check code style
      run: ./gradlew checkstyleMain --no-daemon || true