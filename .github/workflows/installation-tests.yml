name: Installation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to test (space-separated: ubuntu alpine centos)'
        required: false
        default: 'ubuntu alpine centos'
        type: string
      test_modes:
        description: 'Installation modes to test (space-separated: standalone docker global)'
        required: false
        default: 'standalone docker'
        type: string

env:
  TEST_PLATFORMS: ${{ github.event.inputs.platforms || 'ubuntu alpine centos' }}
  INSTALL_MODES: ${{ github.event.inputs.test_modes || 'standalone docker' }}

jobs:
  # Matrix job for testing different platforms
  test-installation:
    name: Test Installation (${{ matrix.platform }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu, alpine, centos]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build test image for ${{ matrix.platform }}
      run: |
        cd testing/installation
        docker build \
          -f docker/Dockerfile.${{ matrix.platform }} \
          -t asciiframe-test:${{ matrix.platform }} \
          .
          
    - name: Run installation tests on ${{ matrix.platform }}
      id: test
      run: |
        # Create results directory
        mkdir -p test-results
        
        # Run test container
        docker run --name test-${{ matrix.platform }} \
          --privileged \
          --tmpfs /run --tmpfs /run/lock \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -e INSTALL_MODES="${{ env.INSTALL_MODES }}" \
          -e SKIP_CLEANUP=true \
          asciiframe-test:${{ matrix.platform }} > test-results/test-${{ matrix.platform }}.log 2>&1
        
        # Get exit code
        exit_code=$?
        echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
        
        # Copy test artifacts
        docker cp test-${{ matrix.platform }}:/home/testuser/ test-results/artifacts-${{ matrix.platform }}/ || true
        
        # Clean up container
        docker rm test-${{ matrix.platform }} || true
        
        exit $exit_code
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: installation-test-results-${{ matrix.platform }}
        path: test-results/
        retention-days: 7
        
    - name: Check test results
      if: steps.test.outputs.exit_code != '0'
      run: |
        echo "❌ Installation test failed on ${{ matrix.platform }}"
        echo "Check the uploaded artifacts for detailed logs"
        exit 1

  # Integration test job (tests the actual release process)
  test-release-installation:
    name: Test Release Installation
    runs-on: ubuntu-latest
    needs: test-installation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup JDK 23
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '23'
        cache: 'gradle'
        
    - name: Build release JAR
      run: |
        chmod +x ./gradlew
        ./gradlew clean shadowJar --no-daemon
        
    - name: Test installation script with local JAR
      run: |
        # Create a temporary "release" directory
        mkdir -p temp-release
        cp build/libs/app-fat.jar temp-release/asciiframe.jar
        cp install.sh temp-release/
        
        cd temp-release
        
        # Test standalone installation
        ASCIIFRAME_VERSION="local" \
        INSTALL_DIR="./test-install" \
        ./install.sh --standalone --skip-start
        
        # Verify installation
        if [[ -f "./test-install/asciiframe.jar" ]]; then
          echo "✅ JAR installation successful"
        else
          echo "❌ JAR installation failed"
          exit 1
        fi
        
        if [[ -x "./test-install/asciiframe" ]]; then
          echo "✅ Wrapper script installation successful"
        else
          echo "❌ Wrapper script installation failed"
          exit 1
        fi
        
        # Test basic functionality
        if timeout 30 ./test-install/asciiframe --help > /dev/null 2>&1; then
          echo "✅ Basic functionality test passed"
        else
          echo "⚠️ Basic functionality test failed (may be normal)"
        fi

  # Generate comprehensive test report
  generate-test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [test-installation]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: all-test-results/
        
    - name: Generate comprehensive test report
      run: |
        mkdir -p test-report
        
        cat > test-report/INSTALLATION_TEST_REPORT.md << 'EOF'
        # AsciiFrame Installation Test Report
        
        **Test Run:** ${{ github.run_number }}  
        **Date:** $(date)  
        **Commit:** ${{ github.sha }}  
        **Branch:** ${{ github.ref_name }}
        
        ## Test Results Summary
        
        | Platform | Result | Logs |
        |----------|--------|------|
        EOF
        
        # Process results for each platform
        for platform in ubuntu alpine centos; do
          if [[ -d "all-test-results/installation-test-results-$platform" ]]; then
            # Check if test log exists and extract result
            log_file="all-test-results/installation-test-results-$platform/test-$platform.log"
            if [[ -f "$log_file" ]]; then
              if grep -q "All installation tests passed!" "$log_file"; then
                echo "| $platform | ✅ PASSED | [View Log](./installation-test-results-$platform/test-$platform.log) |" >> test-report/INSTALLATION_TEST_REPORT.md
              else
                echo "| $platform | ❌ FAILED | [View Log](./installation-test-results-$platform/test-$platform.log) |" >> test-report/INSTALLATION_TEST_REPORT.md
              fi
            else
              echo "| $platform | ❓ NO LOG | - |" >> test-report/INSTALLATION_TEST_REPORT.md
            fi
          else
            echo "| $platform | ❌ NO RESULTS | - |" >> test-report/INSTALLATION_TEST_REPORT.md
          fi
        done
        
        cat >> test-report/INSTALLATION_TEST_REPORT.md << 'EOF'
        
        ## Test Configuration
        
        - **Platforms Tested:** ${{ env.TEST_PLATFORMS }}
        - **Installation Modes:** ${{ env.INSTALL_MODES }}
        - **GitHub Runner:** ubuntu-latest
        - **Docker Version:** $(docker --version)
        
        ## Artifacts
        
        All test artifacts are available in the GitHub Actions artifacts section.
        
        EOF
        
        # Copy all results to report directory
        cp -r all-test-results/* test-report/ 2>/dev/null || true
        
    - name: Upload comprehensive test report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-installation-test-report
        path: test-report/
        retention-days: 30
        
    - name: Comment test results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './test-report/INSTALLATION_TEST_REPORT.md';
          
          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 🧪 Installation Test Results\n\n' + report
            });
          }